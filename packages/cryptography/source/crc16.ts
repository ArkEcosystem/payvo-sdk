const crcTable = [
		0X00_00, 0X11_89, 0X23_12, 0X32_9B, 0X46_24, 0X57_AD, 0X65_36, 0X74_BF, // 1
		0X8C_48, 0X9D_C1, 0XAF_5A, 0XBE_D3, 0XCA_6C, 0XDB_E5, 0XE9_7E, 0XF8_F7, // 2
		0X10_81, 0X01_08, 0X33_93, 0X22_1A, 0X56_A5, 0X47_2C, 0X75_B7, 0X64_3E, // 3
		0X9C_C9, 0X8D_40, 0XBF_DB, 0XAE_52, 0XDA_ED, 0XCB_64, 0XF9_FF, 0XE8_76, // 4
		0X21_02, 0X30_8B, 0X02_10, 0X13_99, 0X67_26, 0X76_AF, 0X44_34, 0X55_BD, // 5
		0XAD_4A, 0XBC_C3, 0X8E_58, 0X9F_D1, 0XEB_6E, 0XFA_E7, 0XC8_7C, 0XD9_F5, // 6
		0X31_83, 0X20_0A, 0X12_91, 0X03_18, 0X77_A7, 0X66_2E, 0X54_B5, 0X45_3C, // 7
		0XBD_CB, 0XAC_42, 0X9E_D9, 0X8F_50, 0XFB_EF, 0XEA_66, 0XD8_FD, 0XC9_74, // 8
		0X42_04, 0X53_8D, 0X61_16, 0X70_9F, 0X04_20, 0X15_A9, 0X27_32, 0X36_BB, // 9
		0XCE_4C, 0XDF_C5, 0XED_5E, 0XFC_D7, 0X88_68, 0X99_E1, 0XAB_7A, 0XBA_F3, // 10
		0X52_85, 0X43_0C, 0X71_97, 0X60_1E, 0X14_A1, 0X05_28, 0X37_B3, 0X26_3A, // 11
		0XDE_CD, 0XCF_44, 0XFD_DF, 0XEC_56, 0X98_E9, 0X89_60, 0XBB_FB, 0XAA_72, // 12
		0X63_06, 0X72_8F, 0X40_14, 0X51_9D, 0X25_22, 0X34_AB, 0X06_30, 0X17_B9, // 13
		0XEF_4E, 0XFE_C7, 0XCC_5C, 0XDD_D5, 0XA9_6A, 0XB8_E3, 0X8A_78, 0X9B_F1, // 14
		0X73_87, 0X62_0E, 0X50_95, 0X41_1C, 0X35_A3, 0X24_2A, 0X16_B1, 0X07_38, // 15
		0XFF_CF, 0XEE_46, 0XDC_DD, 0XCD_54, 0XB9_EB, 0XA8_62, 0X9A_F9, 0X8B_70, // 16
		0X84_08, 0X95_81, 0XA7_1A, 0XB6_93, 0XC2_2C, 0XD3_A5, 0XE1_3E, 0XF0_B7, // 17
		0X08_40, 0X19_C9, 0X2B_52, 0X3A_DB, 0X4E_64, 0X5F_ED, 0X6D_76, 0X7C_FF, // 18
		0X94_89, 0X85_00, 0XB7_9B, 0XA6_12, 0XD2_AD, 0XC3_24, 0XF1_BF, 0XE0_36, // 19
		0X18_C1, 0X09_48, 0X3B_D3, 0X2A_5A, 0X5E_E5, 0X4F_6C, 0X7D_F7, 0X6C_7E, // 20
		0XA5_0A, 0XB4_83, 0X86_18, 0X97_91, 0XE3_2E, 0XF2_A7, 0XC0_3C, 0XD1_B5, // 21
		0X29_42, 0X38_CB, 0X0A_50, 0X1B_D9, 0X6F_66, 0X7E_EF, 0X4C_74, 0X5D_FD, // 22
		0XB5_8B, 0XA4_02, 0X96_99, 0X87_10, 0XF3_AF, 0XE2_26, 0XD0_BD, 0XC1_34, // 23
		0X39_C3, 0X28_4A, 0X1A_D1, 0X0B_58, 0X7F_E7, 0X6E_6E, 0X5C_F5, 0X4D_7C, // 24
		0XC6_0C, 0XD7_85, 0XE5_1E, 0XF4_97, 0X80_28, 0X91_A1, 0XA3_3A, 0XB2_B3, // 25
		0X4A_44, 0X5B_CD, 0X69_56, 0X78_DF, 0X0C_60, 0X1D_E9, 0X2F_72, 0X3E_FB, // 26
		0XD6_8D, 0XC7_04, 0XF5_9F, 0XE4_16, 0X90_A9, 0X81_20, 0XB3_BB, 0XA2_32, // 27
		0X5A_C5, 0X4B_4C, 0X79_D7, 0X68_5E, 0X1C_E1, 0X0D_68, 0X3F_F3, 0X2E_7A, // 28
		0XE7_0E, 0XF6_87, 0XC4_1C, 0XD5_95, 0XA1_2A, 0XB0_A3, 0X82_38, 0X93_B1, // 29
		0X6B_46, 0X7A_CF, 0X48_54, 0X59_DD, 0X2D_62, 0X3C_EB, 0X0E_70, 0X1F_F9, // 30
		0XF7_8F, 0XE6_06, 0XD4_9D, 0XC5_14, 0XB1_AB, 0XA0_22, 0X92_B9, 0X83_30, // 31
		0X7B_C7, 0X6A_4E, 0X58_D5, 0X49_5C, 0X3D_E3, 0X2C_6A, 0X1E_F1, 0X0F_78  // 32
	];

const crc16CcittStart = Number.parseInt("FFFF", 16);
const crc = Number.parseInt("FF", 16);
const xorVariable = Number.parseInt("FFFF", 16);

export class CRC16 {
	/**
	 * Get CRC-16bit-CCITT.
	 *
	 * @param {Buffer} buffer
	 * @returns {int} unsigned CRC 16 bit
	 */
	public static encodeCcitt(buffer: Buffer) {
		let crc16 = crc16CcittStart;

		for (let index = 0; index < buffer.length; index++) {
			crc16 = crcTable[(crc16 ^ buffer.readUInt8(index)) & crc] ^ (crc16 >> 8);
		}

		return (crc16 & xorVariable) ^ xorVariable;
	}
}
