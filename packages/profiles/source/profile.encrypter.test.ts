import { describe } from "@payvo/sdk-test";

import { AttributeBag } from "./helpers/attribute-bag";
import { ProfileEncrypter } from "./profile.encrypter";

describe("ProfileEncrypter #encrypt", ({ it, assert }) => {
	it("should work with provided password", () => {
		let verifyCalledWith = "";

		const profile = {
			auth: () => ({
				verifyPassword: (password) => {
					verifyCalledWith = password;
					return true;
				},
			}),
		};

		const subject = new ProfileEncrypter(profile as any);

		assert.string(subject.encrypt("blah", "some pass"));
		assert.is(verifyCalledWith, "some pass");
	});

	it("should not work with invalid password", () => {
		let verifyCalledWith = "";

		const profile = {
			auth: () => ({
				verifyPassword: (password) => {
					verifyCalledWith = password;
					return false;
				},
			}),
		};

		const subject = new ProfileEncrypter(profile as any);

		assert.throws(() => subject.encrypt("blah", "some pass"));
		assert.is(verifyCalledWith, "some pass");
	});

	it("should use provided password if available", () => {
		const profile = {
			auth: () => ({
				verifyPassword: () => true,
			}),
			password: () => ({
				exists: () => true,
				forget: () => undefined,
				get: () => "some pass",
				set: () => undefined,
			}),
		};

		const subject = new ProfileEncrypter(profile as any);

		assert.string(subject.encrypt("blah"));
	});
});

describe("ProfileEncrypter #decrypt", ({ it, assert }) => {
	it("should work with provided password", () => {
		const attributes = new AttributeBag();
		attributes.set(
			"data",
			"Y2YyN2NkZGZjOTYxZGU1YmRlNTBlNjczMmJkY2MxOGY6NTE2ZDUyMzg1MjMyNzc1MjVhNGU3MDQzNjI2NjM4NDEzNjU5NzQ3ODYxNDkzOTUxNTk0YTY5NmU1MTUzMmIzODZkNWEzNDQyNzk3NDM2MzQ0NjY3NmQzMTc2NjEzNjRmNmY0YjZlNzI1MzMxMzA0NjY0Njc1MzY5NjM2NjcyMzg0YzU0NmM0Nzc4NTQ1MTM2NjI1NDc3NTI3MjZjNGM3MzM4Nzg1MDRjNDI2YjdhNTA0Mjc4MzE0YzdhMzY2YTMxN2E2NjU5NTM3NjZmNzM0NjYzNDc1NjczNDE2OTU1NmM0YzM2NzY2NTQyNGE2MzJiMzE2MTRhNjg2OTM1NjEzNDZhNmE0OTc1NDI0ZDU3NmY0MzUzNTI1MjMzMzI0ODZkNGI3NjU0MzI0Zjc1NjYzMDc2NjU2YjVhNGU2NTcxNDc2ODYzNzg0NzQxNGU1NjU0NDI2NTRlNjk1MTcxNzM1MTQxNTk2YTc4N2E3NTRhNTE0ZDRjNzU1OTYzNmI0MjU0MzI1YTUxNmU0MjUxNzk3YTY4NDIzMTZjNTk1MDM0NGM2YTY5NTg2MTMxNTI1NzUwNjg0NTM1NDc2NDRhNGU1YTM2MzM3MjRkNzA2YTQ5NzY2MzQ5MzM2NjQ3NTY0Mjc3NGQ3OTY5Nzg3NDU3NGM0NDUwNGE0ZDM1NDk3MDUxNzk0ZDZiNmIyYjMwMzg1NDU4NGU3ODU2NmU2YjM4NTQ3MzMzMzk2NTM1NjkzMDc1NDE3MDUxMzkzNDQ1NjQ1NTU0NTQ3MDc2NjE1NTQyNjM1YTczNTQ2NjY5NzczNjM5Nzk3ODUwNzY0ODUyNTU2MTYzNzk2NTczNmYzMjQyNTU0YTc4NmY3OTU0NjI0MTY0NzU2ZTM2NzI2YjQ3NzU2ODUyMzA2OTZmNWE0NzU5NGQ2NTZjNmQ3MzMxNTA3MTQyNzU0ZDYxNDUzMzRjNmU2ZDMzMzE0ZjRiNDg0YjM0MzM2NjU2MzM3NzRlNTIzOTM2NGE3OTZkNjY2NTU2MzA0ZDM2NGI2YTU5NmE1ODU2MzI0Mzc3NjgzODUyNTA0ZDQ4NTAzMTRmNTI2YjY3NmEzNDZmNTQ2ODM5MzI0NzU3Mzc1NDQ0NDYzNzM0NDgzNDczNGYyZjQxMzQ1MjcxNTA1NzczMzk3OTc5Nzg1MTYyNTUzODM2Nzc2ODMxNDM1MjM3MzE1NTcyMzk2MTc2NmQ0ZjQ0NTAzOTU2NjQ3OTczNTQ0MjYzNDk3MDQ5NzczMjcxNjU2ZjQ0NDM3MjM3Nzc0NzU5MzA0MzU2NGE1NDcwNTMyYjZmNzU3MDY0NjM0ZTM3Nzg0MjU0NjU0ZjJmNjk3MzJmNmY2MzM1NzMzNzczNjc1MTZkNzk1OTQyN2E3NDMzNTQ2NTUwNTQ0NzQ3NDQ3OTM0NzMzMjY5NzczNzQ4MmIzODU4NmQ0ZjU0NTg2NDM5NzU2YjQ3NGUzNzcwNjk0NDY5NTQ2ODZmNTc1NTM4Nzk2YjQ4NzQ1MTdhNzAyYjRmNDMzMDM0NTE2YTJiNDg1NjRjMzQ0ZjQ3MzE1MDMyMzU0NTRiN2EzNTQ0MzU3YTQ5NzI3MjZjMzc3MjY5MzM2YTRkNDk2YjYxNTA3YTM0Nzk1OTQzNGQzMjM1NDUzNTJmNjU1ODc2NmU0YzY3NzA3MTYxNzQ2ZjUzNmE2NzQ0NzY3MDc2NzQ1NzQzNTg3NTQ3MzI0YTMxMzI0ZTc1NGE3NDUyNGU1NTU5Nzc1MDRhNGQ1OTc4NjEzMDU2MzkzMTZiNTAzMjUzN2E1ODUyNGUzODU3NGE1MTcxNmY3NTY5NGM0NDY2NTY1MDQ0NjI3NzY5Mzc0YzQ3NTk3ODY0MzEzMDMyNmQ0MzcyNmYzNzUxNzUzNDUxNjY1OTM5NDM0NjQ1NmE1YTU2NWE3MDUyNGE3MDRhNTU0ZTJmMzczMTY5NGIzMjQ3NDc0OTY2NTg3NzcwNjE2NjUzNjU3NzRjNjUzNDdhNTU0ZTQ1NDU3MjM2NGQ0MzQ5NjM1NjY4NzI1NDU1NjY0ZjcxNGU0OTMyNTE1NjQ0NTU1MzU1NmE0MTc0NzczNjZiNmEzMDRlMzM0ODQxNjg2OTM3NzMzMzY1NGY1NDY4NmQzMDM4NDk1MTRiNzczOTU3NTU1MDQ0NmY2MTRjMzg1NTMzNDQ3NjJiMzQ3NDY1NGU1NTJiNDQ0NTc1Mzg1MTQ0NjUzMDU0MmY2ZDQyMmI0YTdhNjM1MDMzNzU3NTJmNTQ3ODc0Nzk1NzYzNDIzMzY1NjY1ODc0NTYzOTRjMzk0ZTc3MmY2ODYyNjMzMDJiMzI2MjQ3Njc2NzJmNmUyZjZlMzUzMTQxNzU1YTY5NTgzODY1NjU2NjYzNTA1OTRkNDE0ODY5NGI3OTYzNzE1NTM3NDg0ZjY4NTQ3NzU4NmI2YjU3MzU3NzU2NGM1MTU3Njk2NTYxNDIzMDcxNjg3NTY1NDE3ODY1NDQ2MTRhNDUzMzMzNTA2ODQ4NTA1NDZjMzE3MDQzNjM1MjU3NzA0ZDQ0NzI2Njc2NmQ2MzU0NjEyZjRlNmEzOTRjNWE3MDVhNTk2ODM1MmY2MTM0NTY1NTRkNjYzMjJiNWE1NTY2NTU0Zjc1MmI2MTM0NTk1NzRjNGM1MDZhNTAzMDZiN2E2YTMwNmY1OTcwNTU0Mzc3NzU1YTY2NjU3NDU5NmUzMTVhNjU3ODM1NGEzNjMyMzIzMzM1NTU3NTU2NmQ0MTQ3NjE1MDY2NGQ3MTY4NmQyZjMxNDg2OTQ0NGE3NTY0NGU2MjczMzk2NTU2Mzg1YTY4MzMzMzY4NmY3MDUwNDQ3YTZkNTQzNDc5NzY0OTZmMzM2ZDZlNjk2MjZhNzczMzVhNmM1NTQyNzU0ZjcxNDY0YjY5NTczMjRhNTE3NDdhNTE2YjUzNzY2ODQ1NTY2NTM1NjE1YTcyNDU3ODQ3MzU3NzcxMzQzNzJiMzA0MTM4NjM0Yjc1NzE1MDc4NTUzNTY1NjU2MjU2NzU0MzM1NGE1NzVhMzA1NTcxNzkzODMwNGE0ZjdhNGE0NDczNzgzMDRmNDY0MTYxNzc3ODRjNjQ2MzY4NTgzODU2NjgzMzRjNTU0NzZlMzE1MjZiNmM0MjUzNjE0ZjcxNDM0ZjUyMzE2MzM1NDU0OTc0MzM3ODU2NTU0ZjM3NDI3ODc3NjMzMDY1NDU1MDRmNDY0MjY1NzY0OTY0NzMzOTcyNjI2YjMwMzc3MTc4MmI2ZTU2NmY3MTc5NzU0OTQ2MzY0OTU4NGI3MjRlNjgzMjQzMzQ2YTUyMzgzNzY2Njk1NDczNGQ1YTQyNDM2ZTc5NDg3NTU0NTU1NzU5MzA0ZDRmMzM1MjcyMzE2MzUzNjM0ODc5NmM2MzU0NDczNzU0MzI3MDRiNGU3OTcyNjkyZjUwNDY1NTQ3NDg0YTU3NGY3NzUyMzM0YTY3NzI2ZjZiNDE0YzRiNzc0Mjc3MzUzMzMzNmY0OTQzNDY3YTJmNzc0NjM4NTI1NDY2Njc0YzM2Nzk0NTRhNzc2ZjdhNzAzNTM2MzE2YTczNjMzNzQ5NDEyYjVhNTc0NzQzNjg3Mzc1NzMzNjYxNmY0YzY4NTUzMjU3MzAyZjU3N2E1NDQ0NmQ2NTY4NTY3MjcyMzY0YjQzNTA0NjcwMzg3NjUyNjEzNDQ5NGI0MTRlMmY2YTRkNDUzMDM5NDk3NzQ2Nzk2YzU0MmIzNTY5MzE1YTU4NzM2MTJiNjM3ODcwNGY0ODc1NTY3Mjc3NzczNTRjNDcyZjM5NzMzMjRjNjk0ZDM2NDk0NDczNTU2NDRkNDg2ZTUxNGE3MjUzNzQ1MTcwNjEzNzQ3NDI2MjMwNjc3NDRmNjYzMTRlNzc2MTY0MzM1NTYxNDQ0NTZmNmI3NzdhMzg0YjZkNTY0YTQ4NWE2NjU3Njk2NjUwNzY1NTQ2NDc0MjUxNmM3NDRmNGEzMTM5NDI3NTMzNjg1MzUwMzk2YjM1Mzc3NzJmNjU2ZTU1Mzk0YjdhNzA1MTZiNzM2NTY1NWE1MjU1NzYzMDZjMzQzNDQ2NDIyZjcyMzkzMjc3NGI2ZTU2NTE2MjcxNmM0NzZiNjU0MzUzNDUzODdhNDkyYjcwNGU0YTQyNzc1MTMyN2E1MzVhNDk1NDJiMzg1MDM2NjE3NzQxNTYzMDZmNWEzMjYzNzE0ODU4NzU3MTUzNjk2NTc2NzI2ODU4NzU0YjRiNDQzMDM0NjY1ODcxMzY0ODUwNjU0Yjc4MzE1MDY2NDU2ZDU2NTk3MzM5NjEzNDc3NDI0ZDMwNTQ1OTMxNzc3YTQ5NDczMzVhMzU1ODcwNmU1YTc0Mzg2YjM3NTY2ZDU3NmY0YzJiNTE1ODQxMzM1OTRjMzg0ZDMyNTU1NTQ3NzI0OTc5NzU1YTcxNzI0MjZmNDQ2OTMzNmY3NjM1NDE2MjQ1NjE1YTYzNTI2MzcwNTI2NzQ2MzM1MDQ1Njc2ZTcxNDU3OTJmNTQ0NzRmMzc0Nzc0NzY2MjUyNzI1NzU0NzU2Mzc3MmY1MTJiN2E0MTNkM2Q=",
		);

		const profile = {
			getAttributes: () => attributes,
			usesPassword: () => true,
		};

		const subject = new ProfileEncrypter(profile as any);

		const decrypted = subject.decrypt("some pass");
		assert.is(decrypted.id, "2236b838-7e79-4412-b23a-e505016723ef");
	});

	it("should failed if profile is not encrypted", () => {
		const profile = { usesPassword: () => false };

		const subject = new ProfileEncrypter(profile as any);

		assert.throws(() => subject.decrypt("some pass"));
	});
});
